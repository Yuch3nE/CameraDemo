<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://marklodato.github.io/visual-git-guide/index-en.html -->
<!DOCTYPE html><HTML lang="en-US"><HEAD>
<META content="text/html; charset=utf-8" http-equiv="Content-Type"><TITLE>A 
Visual Git Reference</TITLE><LINK rel="stylesheet" type="text/css" href="A%20Visual%20Git%20Reference_files/visual-git-guide.css">
<SCRIPT type="text/javascript" src="A%20Visual%20Git%20Reference_files/visual-git-guide.js"></SCRIPT>

<META name="GENERATOR" content="MSHTML 9.00.8112.16443"></HEAD>
<BODY onload="replace_all_PNGs();">
<H1 id="top">A Visual Git Reference</H1>
<DIV id="language-box"><A>Other Languages:</A>
<UL>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-de.html">Deutsch</A></LI>
  <LI class="selected">English</LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-es.html">Español</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-fr.html">Français</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-it.html">Italiano</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-ja.html">日本語</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-ko.html">한국어</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-pt.html">Português</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-ru.html">Русский</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-sk.html">Slovenčina</A></LI>
  <LI><A href="http://marklodato.github.io/visual-git-guide/index-vi.html">Tiếng 
  Việt</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">简体中文</A></LI>
  <LI><A 
  href="http://marklodato.github.io/visual-git-guide/index-zh-tw.html">正體中文</A></LI></UL></DIV>
<P id="link-to-png">If the images do not work, you can try the <A href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">Non-SVG</A> 
version of this page.</P>
<P id="link-to-svg">SVG images have been disabled.  <A href="http://marklodato.github.io/visual-git-guide/index.html">(Re-enable 
SVG)</A></P>
<P>This page gives brief, visual reference for the most common commands  in git. 
 Once you know a bit about how git works, this site may solidify  your 
understanding.  If you're interested in how this site was created, see  my <A 
href="http://github.com/MarkLodato/visual-git-guide">GitHub    
repository</A>.</P>
<P id="link-to-d3">Also recommended: <A href="http://onlywei.github.io/explain-git-with-d3/#">Visualizing 
Git      Concepts with D3</A></P>
<H2 id="contents">Contents</H2>
<OL>
  <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#basic-usage">Basic 
  Usage</A></LI>
  <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#conventions">Conventions</A></LI>
  <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#commands-in-detail">Commands 
  in Detail</A>
  <OL>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#diff">Diff</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#commit">Commit</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#checkout">Checkout</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#detached">Committing 
    with a Detached HEAD</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#reset">Reset</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#merge">Merge</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#cherry-pick">Cherry 
    Pick</A></LI>
    <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#rebase">Rebase</A></LI></OL></LI>
  <LI><A href="http://marklodato.github.io/visual-git-guide/index-en.html#technical-notes">Technical 
  Notes</A></LI></OL>
<H2 id="basic-usage">Basic Usage</H2>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/basic-usage.svg.png"></DIV>
<P>The four commands above copy files between the working directory, the  stage 
(also called the index), and the history (in the form of commits).</P>
<UL>
  <LI><CODE>git add <EM>files</EM></CODE> copies <EM>files</EM> (at their    
  current state) to the stage.</LI>
  <LI><CODE>git commit</CODE> saves a snapshot of the stage as a    commit.</LI>
  <LI><CODE>git reset -- <EM>files</EM></CODE> unstages files; that is, it    
  copies <EM>files</EM> from the latest commit to the stage.  Use this    
  command to "undo" a <CODE>git add <EM>files</EM></CODE>.  You can also    
  <CODE>git reset</CODE> to unstage everything.</LI>
  <LI><CODE>git checkout -- <EM>files</EM></CODE> copies <EM>files</EM> from     
  the stage to the working directory.  Use this to throw away local    
  changes.</LI></UL>
<P>You can use <CODE>git reset -p</CODE>, <CODE>git checkout -p</CODE>, or  
<CODE>git add -p</CODE> instead of (or in addition to) specifying particular  
files to interactively choose which hunks copy.</P>
<P>It is also possible to jump over the stage and check out files directly   
from the history or commit files without staging first.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/basic-usage-2.svg.png"></DIV>
<UL>
  <LI><CODE>git commit -a </CODE> is equivalent to running <TT>git add</TT>     
  on all filenames that existed in the latest commit, and then running     
  <TT>git commit</TT>.</LI>
  <LI><CODE>git commit <EM>files</EM></CODE> creates a new commit containing     
  the contents of the latest commit, plus a snapshot of <EM>files</EM> taken     
  from the working directory.  Additionally, <EM>files</EM> are copied to     
  the stage.</LI>
  <LI><CODE>git checkout HEAD -- <EM>files</EM></CODE> copies <EM>files</EM>     
  from the latest commit to both the stage and the working directory.</LI></UL>
<H2 id="conventions">Conventions</H2>
<P>In the rest of this document, we will use graphs of the following  form.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/conventions.svg.png"></DIV>
<P>Commits are shown in green as 5-character IDs, and they point to their  
parents.  Branches are shown in orange, and they point to particular  commits.  
The current branch is identified by the special reference  <EM>HEAD</EM>, which 
is "attached" to that branch.  In this image, the five  latest commits are 
shown, with <EM>ed489</EM> being the most recent.  <EM>master</EM> (the current 
branch) points to this commit, while  <EM>maint</EM> (another branch) points to 
an ancestor of <EM>master</EM>'s  commit.</P>
<H2 id="commands-in-detail">Commands in Detail</H2>
<H3 id="diff">Diff</H3>
<P>There are various ways to look at differences between commits.  Below are  
some common examples.  Any of these commands can optionally take extra  filename 
arguments that limit the differences to the named files.</P>
<DIV class="center"><IMG 
src="A%20Visual%20Git%20Reference_files/diff.svg.png"></DIV>
<H3 id="commit">Commit</H3>
<P>When you commit, git creates a new commit object using the files from the  
stage and sets the parent to the current commit.  It then points the current  
branch to this new commit.  In the image below, the current branch is  
<EM>master</EM>.   Before the command was run, <EM>master</EM> pointed to  
<EM>ed489</EM>.  Afterward, a new commit, <EM>f0cec</EM>, was created, with  
parent <EM>ed489</EM>, and then <EM>master</EM> was moved to the new  
commit.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/commit-master.svg.png"></DIV>
<P>This same process happens even when the current branch is an ancestor of  
another.  Below, a commit occurs on branch <EM>maint</EM>, which was an  
ancestor of <EM>master</EM>, resulting in <EM>1800b</EM>.  Afterward,  
<EM>maint</EM> is no longer an ancestor of <EM>master</EM>.  To join the two  
histories, a <A href="http://marklodato.github.io/visual-git-guide/index-en.html#merge">merge</A> 
(or <A 
href="http://marklodato.github.io/visual-git-guide/index-en.html#rebase">rebase</A>) 
 will be necessary.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/commit-maint.svg.png"></DIV>
<P>Sometimes a mistake is made in a commit, but this is easy to correct with  
<CODE>git commit --amend</CODE>.  When you use this command, git creates a  new 
commit with the same parent as the current commit.  (The old commit will  be 
discarded if nothing else references it.)</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/commit-amend.svg.png"></DIV>
<P>A fourth case is committing with a <A href="http://marklodato.github.io/visual-git-guide/index-en.html#detached">detached 
   HEAD</A>, as explained later.</P>
<H3 id="checkout">Checkout</H3>
<P>The checkout command is used to copy files from the history (or stage) to  
the working directory, and to optionally switch branches.</P>
<P>When a filename (and/or <CODE>-p</CODE>) is given, git copies those files  
from the given commit to the stage and the working directory.  For example,  
<CODE>git checkout HEAD~ foo.c</CODE> copies the file <CODE>foo.c</CODE>  from 
the commit called <EM>HEAD~</EM> (the parent of the current commit) to  the 
working directory, and also stages it.  (If no commit name is given,  files are 
copied from the stage.)  Note that the current branch is not  changed.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/checkout-files.svg.png"></DIV>
<P>When a filename is <EM>not</EM> given but the reference is a (local)  branch, 
<EM>HEAD</EM> is moved to that branch (that is, we "switch to" that  branch), 
and then the stage and working directory are set to match the  contents of that 
commit.  Any file that exists in the new commit  (<EM>a47c3</EM> below) is 
copied; any file that exists in the old commit  (<EM>ed489</EM>) but not in the 
new one is deleted; and any file that exists  in neither is ignored.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/checkout-branch.svg.png"></DIV>
<P>When a filename is <EM>not</EM> given and the reference is <EM>not</EM> a  
(local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or  something 
like <EM>master~3</EM> — we get an anonymous branch, called  a <EM>detached 
HEAD</EM>.  This is useful for jumping around the history.  Say you want to 
compile version 1.6.6.1 of git.  You can <CODE>git checkout    v1.6.6.1</CODE> 
(which is a tag, not a branch), compile, install, and then  switch back to 
another branch, say <CODE>git checkout master</CODE>.  However, committing works 
slightly differently with a detached HEAD; this is  covered <A href="http://marklodato.github.io/visual-git-guide/index-en.html#detached">below</A>.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/checkout-detached.svg.png"></DIV>
<H3 id="detached">Committing with a Detached HEAD</H3>
<P>When <EM>HEAD</EM> is detached, commits work like normal, except no named  
branch gets updated.  (You can think of this as an anonymous branch.)</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/commit-detached.svg.png"></DIV>
<P>Once you check out something else, say <EM>master</EM>, the commit is  
(presumably) no longer referenced by anything else, and gets lost.  Note  that 
after the command, there is nothing referencing <EM>2eecb</EM>.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/checkout-after-detached.svg.png"></DIV>
<P>If, on the other hand, you want to save this state, you can create a new  
named branch using <CODE>git checkout -b <EM>name</EM></CODE>.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/checkout-b-detached.svg.png"></DIV>
<H3 id="reset">Reset</H3>
<P>The reset command moves the current branch to another position, and  
optionally updates the stage and the working directory.  It also is used to  
copy files from the history to the stage without touching the working  
directory.</P>
<P>If a commit is given with no filenames, the current branch is moved to  that 
commit, and then the stage is updated to match this commit.  If  
<CODE>--hard</CODE> is given, the working directory is also updated.  If  
<CODE>--soft</CODE> is given, neither is updated.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/reset-commit.svg.png"></DIV>
<P>If a commit is not given, it defaults to <EM>HEAD</EM>.  In this case,  the 
branch is not moved, but the stage (and optionally the working  directory, if 
<CODE>--hard</CODE> is given) are reset to the contents of the  last commit.</P>
<DIV class="center"><IMG 
src="A%20Visual%20Git%20Reference_files/reset.svg.png"></DIV>
<P>If a filename (and/or <CODE>-p</CODE>) is given, then the command works  
similarly to <A href="http://marklodato.github.io/visual-git-guide/index-en.html#checkout">checkout</A> 
with a filename, except only  the stage (and not the working directory) is 
updated.  (You may also specify  the commit from which to take files, rather 
than <EM>HEAD</EM>.)</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/reset-files.svg.png"></DIV>
<H3 id="merge">Merge</H3>
<P>A merge creates a new commit that incorporates changes from other  commits.  
Before merging, the stage must match the current commit.  The  trivial case is 
if the other commit is an ancestor of the current commit, in  which case nothing 
is done.  The next most simple is if the current commit  is an ancestor of the 
other commit.  This results in a <EM>fast-forward</EM>  merge.  The reference is 
simply moved, and then the new commit is checked  out.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/merge-ff.svg.png"></DIV>
<P>Otherwise, a "real" merge must occur.  You can choose other strategies,  but 
the default is to perform a "recursive" merge, which basically takes the  
current commit (<EM>ed489</EM> below), the other commit (<EM>33104</EM>),  and 
their common ancestor (<EM>b325c</EM>), and performs a <A href="http://en.wikipedia.org/wiki/Three-way_merge">three-way 
merge</A>.  The result is saved to the working directory and the stage, and then 
a  commit occurs, with an extra parent (<EM>33104</EM>) for the new commit.  
</P>
<DIV class="center"><IMG 
src="A%20Visual%20Git%20Reference_files/merge.svg.png"></DIV>
<H3 id="cherry-pick">Cherry Pick</H3>
<P>The cherry-pick command "copies" a commit, creating a new commit on the  
current branch with the same message and patch as another commit.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/cherry-pick.svg.png"></DIV>
<H3 id="rebase">Rebase</H3>
<P>A rebase is an alternative to a <A href="http://marklodato.github.io/visual-git-guide/index-en.html#merge">merge</A> 
for combining  multiple branches.  Whereas a merge creates a single commit with 
two  parents, leaving a non-linear history, a rebase replays the commits from 
the  current branch onto another, leaving a linear history.  In essence, this is 
 an automated way of performing several <A href="http://marklodato.github.io/visual-git-guide/index-en.html#cherry-pick">cherry-pick</A>s 
in a row.</P>
<DIV class="center"><IMG 
src="A%20Visual%20Git%20Reference_files/rebase.svg.png"></DIV>
<P>The above command takes all the commits that exist in <EM>topic</EM> but  not 
in <EM>master</EM> (namely <EM>169a6</EM> and <EM>2c33a</EM>), replays  them 
onto <EM>master</EM>, and then moves the branch head to the new tip.  Note that 
the old commits will be garbage collected if they are no longer  referenced.</P>
<P>To limit how far back to go, use the <CODE>--onto</CODE> option.  The  
following command replays onto <EM>master</EM> the most recent commits on  the 
current branch since <EM>169a6</EM> (exclusive), namely  <EM>2c33a</EM>.</P>
<DIV class="center"><IMG src="A%20Visual%20Git%20Reference_files/rebase-onto.svg.png"></DIV>
<P>There is also <CODE>git rebase --interactive</CODE>, which allows one to  do 
more complicated things than simply replaying commits, namely dropping,  
reordering, modifying, and squashing commits.  There is no obvious picture  to 
draw for this; see <A href="http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html#_interactive_mode">git-rebase(1)</A> 
 for more details.</P>
<H2 id="technical-notes">Technical Notes</H2>
<P>The contents of files are not actually stored in the index  
(<EM>.git/index</EM>) or in commit objects.  Rather, each file is stored in  the 
object database (<EM>.git/objects</EM>) as a <EM>blob</EM>, identified  by its 
SHA-1 hash.  The index file lists the filenames along with the  identifier of 
the associated blob, as well as some other data.  For commits,  there is an 
additional data type, a <EM>tree</EM>, also identified by its  hash.  Trees 
correspond to directories in the working directory, and contain  a list of trees 
and blobs corresponding to each filename within that  directory.  Each commit 
stores the identifier of its top-level tree, which  in turn contains all of the 
blobs and other trees associated with that  commit.</P>
<P>If you make a commit using a detached HEAD, the last commit really is  
referenced by something: the reflog for HEAD.  However, this will expire  after 
a while, so the commit will eventually be garbage collected, similar  to commits 
discarded with <CODE>git commit --amend</CODE> or <CODE>git    
rebase</CODE>.</P>
<HR>

<P>Copyright © 2010,    <A href="mailto:lodatom@gmail.com">Mark Lodato</A>.  
Japanese translation © 2010,    <A href="http://github.com/kazu-yamamoto">Kazu 
Yamamoto</A>.  Korean translation © 2011,    <A 
href="mailto:sean@weaveus.com">Sean Lee</A>.  Russian translation © 2012,    <A 
href="mailto:alex@sychev.com">Alex Sychev</A>.  French translation © 2012,    <A 
href="mailto:michel.lefranc@gmail.com">Michel Lefranc</A>.  Chinese translation 
© 2012,    <A href="mailto:ellrywych@gmail.com">wych</A>.  Spanish translation © 
2012,    <A href="http://www.delucas.com.ar/">Lucas Videla</A>.  Italian 
translation © 2012,    <A href="mailto:daniel.londero@gmail.com">Daniel 
Londero</A>.  German translation © 2013,    <A href="mailto:mafulafunk@gmail.com">Martin 
Funk</A>.  Slovak translation © 2013,    <A 
href="https://github.com/llucenic">Ľudovít Lučenič</A>.  Portuguese translation 
© 2014,    <A href="mailto:goliveira5d@gmail.com">Gustavo de Oliveira</A>  
Traditional Chinese translation © 2015,    <A href="https://github.com/PeterDaveHello">Peter 
Dave Hello</A></P>
<P><A href="https://creativecommons.org/licenses/by-nc-sa/3.0/us/" 
rel="license"><IMG alt="" 
src="A%20Visual%20Git%20Reference_files/80x15.png"></A>  This work is licensed 
under a <A href="https://creativecommons.org/licenses/by-nc-sa/3.0/us/" rel="license">Creative 
   Commons Attribution-Noncommercial-Share Alike 3.0 United States    
License</A>.</P>
<P><A href="http://marklodato.github.io/visual-git-guide/translate-en.html">Want 
to translate into another    language?</A></P></BODY></HTML>
